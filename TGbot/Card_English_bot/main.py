import random
import sqlalchemy
import enchant
import requests
import telebot
from telebot import types
from sqlalchemy.orm import sessionmaker
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from TGbot.Card_English_bot.models import create_tables, Users, UsersWords, Words, drop_tables, words_add
"""–¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å
 –Ω–∏–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è API TG–ë–æ—Ç–∞, Yandex –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∏ –¥–æ—Å—Ç—É–ø –∫ –ë–î
  –û–Ω —É–º–µ–µ—Ç –¥–æ–±–æ–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö"""

log_sql = input('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω postgres: ')
pas_sql = input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å postgres: ')
DSN = f'postgresql://{log_sql}:{pas_sql}@localhost:5432/englishcard_db'
engine = sqlalchemy.create_engine(DSN)
Session = sessionmaker(bind=engine)
session = Session()

# drop_tables(engine) #–£–î–ê–õ–ï–ù–ò–ï –í–°–ï–ô –¢–ê–ë–õ–ò–¶–ò
create_tables(engine)
words_add(session) #–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–∏ 10—é –ø–µ—Ä–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

state_storage = StateMemoryStorage()
token_tg = input('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¢–ì –±–æ—Ç–∞: ')
bot = telebot.TeleBot(token_tg)
token_ya = input('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω YA –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫: ')
class Yan:
    """–ö–ª–∞—Å—Å —è–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ —Å –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
     –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ"""
    def Translator(self):
        word_ = self.text.capitalize()
        url = 'https://dictionary.yandex.net/api/v1/dicservice.json/lookup'
        d = enchant.Dict("en_US")
        params = {
            'key': token_ya,
            'lang': 'en-ru',
            'text': word_,
            'ui': 'ru'
            }
        try:
            if d.check(word_):
                response = requests.get(url=url, params=params).json()
                return [word_, response['def'][0]['tr'][0]['text'].capitalize()]

            else:
                params.update(lang='ru-en')
                response = requests.get(url=url, params=params).json()
                return [response['def'][0]['tr'][0]['text'].capitalize(), word_]
        except LookupError:
            pass


class Cards_DB:
    """ –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î"""
    def dell_words_db(self):
        '''–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
        word_eng = Yan.Translator(self)
        q = (session.query(UsersWords)
            .filter((UsersWords.id_words == Cards_DB.get_id_word(word_eng[0]))
                     & (UsersWords.id_user == Cards_DB.get_id_u(self))))
        if bool(q.all()) == True:
            q.delete()
            session.commit()
            return bot.send_message(self.chat.id,
                                    f'–°–ª–æ–≤–æ <b>{self.text.capitalize()}</b> –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–Ω–æ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.',
                                    parse_mode='HTML')
        else:
            return bot.send_message(self.chat.id,
                                    f'–°–ª–æ–≤–∞ <b>{self.text.capitalize()}</b> –∏ —Ç–∞–∫ –Ω–µ—Ç —É –≤–∞—Å –≤ —Å–ª–æ–≤–∞—Ä–µ.',
                                     parse_mode='HTML')

    def get_id_u(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id —é–∑–µ—Ä–∞"""
        q = session.query(Users).filter(Users.user == self.from_user.id)
        for i in q.all():
            return i.id_u

    def get_id_word(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id —Å–ª–æ–≤–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–∏ —Å–ª–æ–≤"""
        q = session.query(Words).filter(Words.words_eng == self)
        for i_w in q.all():
            return i_w.id

    def get_words(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ ['–∞–Ω–≥–ª','—Ä—É—Å']"""
        words = []
        q = (session.query(Words)
             .join(UsersWords)
             .filter(UsersWords.id_user == Cards_DB.get_id_u(self))
             )
        for i in q.all():
            words.append((i.words_eng, i.translation))
        random.shuffle(words)
        return words

    def add_db_new_user(self):
        '''–î–æ–±–æ–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î'''

        if bool(Cards_DB.get_id_u(self)) == False:
            session.add(Users(id_u=Cards_DB.get_id_u(self), user=self.from_user.id))
            add_ = session.query(Words).filter(Words.id <= 10)
            for s in add_.all():
                session.add(UsersWords(id_user=Cards_DB.get_id_u(self), id_words=s.id))
            session.commit()
    def add_db_new_words(self):
        '''–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤—ã–∞—Ç–µ–ª—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞ Yan'''
        res = Yan.Translator(self)
        if res != None:
            eng = res[0]
            rus = res[1]
            q = session.query(Words).filter(Words.words_eng == eng)
            uw = (session.query(UsersWords).filter((UsersWords.id_user == Cards_DB.get_id_u(self))
                                                   & (UsersWords.id_words == Cards_DB.get_id_word(eng))))
            if bool(q.all()) == False:
                session.add(Words(words_eng=eng, translation=rus))
                session.add(UsersWords(id_user=Cards_DB.get_id_u(self), id_words=Cards_DB.get_id_word(eng)))

                session.commit()
            elif bool(uw.all()) == False:
                session.add(UsersWords(id_user=Cards_DB.get_id_u(self), id_words=Cards_DB.get_id_word(eng)))
                session.commit()
            else:
                return bot.send_message(self.chat.id, f'–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ!')
            count_ = session.query(UsersWords).filter(UsersWords.id_user == Cards_DB.get_id_u(self)).count()
            return bot.send_message(self.chat.id, f'–°–ª–æ–≤–æ üá∫üá∏<b>{eng}</b> --> üá∑üá∫<b>{rus}</b>\
             –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å.\
–¢–µ–ø–µ—Ä—å –≤ —Å–ª–æ–≤–∞—Ä–µ {count_} —Å–ª–æ–≤!', parse_mode='HTML')

        else:
            return bot.send_message(self.chat.id, f'–°–ª–æ–≤–æ {self.text} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ª–∏–±–æ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')


class Command:
    '''–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¢–ì –±–æ—Ç–∞'''
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    LESSON = '–ü–æ–µ—Ö–∞–ª–∏ üöÄ'

class MyStates(StatesGroup):
    correct = State()
    translate = State()
    other_words = State()

class Telegram:
    """–ö–ª–∞—Å—Å –¢–ì–±–æ—Ç–∞"""

    @bot.message_handler(commands=['start'])
    def starts(message):

        if bool(Cards_DB.get_id_u(message)) == False:
            Cards_DB.add_db_new_user(message)
            bot.send_message(message.chat.id,
    f'–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n\
                             \n\
–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\
. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n\
        \n\
        –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n\
        —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\
                             \n\
        –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è')

        markup = types.ReplyKeyboardMarkup(row_width=2)
        buttons = []
        words = Cards_DB.get_words(message)
        translate = words[0][1]
        correct = words[0][0]
        correct_btn = types.KeyboardButton(correct)
        buttons.append(correct_btn)
        other_words = [words[i+1][0] for i in range(len(words[1:4]))]
        other_words_btn = [types.KeyboardButton(word) for word in other_words]
        buttons.extend(other_words_btn)
        random.shuffle(buttons)
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        buttons.extend([add_word_btn, delete_word_btn, next_btn])

        markup.add(*buttons)

        greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ <b>{translate}</b>"
        bot.send_message(message.chat.id, greeting, parse_mode='HTML', reply_markup=markup)
        bot.set_state(message.from_user.id, MyStates.correct, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['correct'] = correct
            data['translate'] = translate
            data['other_words'] = other_words


    @bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
    def add_words(message):
        add_word = bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?')
        bot.register_next_step_handler(add_word, Cards_DB.add_db_new_words)


    @bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
    def delete_words(message):
        del_word = bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?')
        bot.register_next_step_handler(del_word, Cards_DB.dell_words_db)

    @bot.message_handler(func=lambda message: message.text == Command.NEXT)
    def next(message):
        Telegram.starts(message)

    @bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'sticker'])
    def message_reply(message):
        text = message.text

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            correct = data['correct']
            translate = data['translate']

            if text == correct:
                markup = types.ReplyKeyboardMarkup(row_width=2)
                buttons = []
                next_btn = types.KeyboardButton(Command.NEXT)
                add_word_btn = types.KeyboardButton(Command.ADD_WORD)
                delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
                buttons.extend([add_word_btn, delete_word_btn, next_btn])

                markup.add(*buttons)
                bot.send_message(message.chat.id,
                                 f'ü•≥ü•≥ü•≥–û—Ç–ª–∏—á–Ω–æ —Å–ª–æ–≤–æ üá∑üá∫<b>{translate}</b> --> üá∫üá∏<b>{correct}</b>',
                                      parse_mode='HTML', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, f'‚ùå –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫<b>{translate}</b> ?',
                                     parse_mode='HTML')

session.close()
bot.polling(none_stop=True)
if __name__=='__main__':
    pass